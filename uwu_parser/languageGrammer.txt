<statements>        ::= <statement> <statements>

<statement>         ::= <expr_stmnt>
                    | <cond_stmnt>
                    | <assign_stmnt>
                    | <decl_stmnt>
                    | <if_stmnt>
                    | <loop_stmnt> ðŸ‘ˆ
                    | <print_stmnt>    
                    | <func_def>

TODO expr_id needs to be amended
<expr_stmnt>        ::= <binary_expr>
                    | <expr_group>
                    | <operand>
                

<binary_expr>       ::= <expr_stmnt> <binary_op_math> <expr_stmnt>

<expr_group>        ::= LPARN binary_expr RPAREN


<cond_stmnt>        ::= <operand> <binary_op_logic> <operand> 
                    | <operand>

<operand>           ::= <expr_id>
                    | <number_const>

<expr_id>           ::= <identifier>


TODO define number and its regular expression
<number_const>      ::= <>
            
<binary_op_logic>   ::= AND | OR | IS | NOT | GT | LT 

<binary_op_math>    ::= PLUS | MINUS | MULT | DIVIDE | MOD


<assign_stmnt>      ::= <identifier> EQUAL <expr_stmnt>
                    | <decl_stmnt> EQUAL <expr_stmnt>


<decl_stmnt>        ::= <typed_decl_expr>
                    | <decl_expr>

<typed_decl_expr>   ::= VAR <identifier> COLON <data_type>
<decl_expr>         ::= VAR <identifier>

<data_type>         ::= INT | FLOAT | STRING


<if_stmnt>          ::= IF <cond_stmnt> LBRACE <statements> RBRACE
                    | IF <cond_stmnt> LBRACE <statements> RBRACE ELSEIF <cond_stmnt> LBRACE <statements> RBRACE 
                    | IF <cond_stmnt> LBRACE <statements> RBRACE ELSE LBRACE <statements> RBRACE 
                        
<print_stmnt>       ::= PRINT LPAREN {<string_literal> | binary_expr} RPAREN 


<func_def>          ::= FUNC <identifier> (<params>?) ARROW LBRACE <statements> RBRACE

<params>            ::= <identifier> | (<identifier>[,])*

<string_literal>    ::= '"{<alpha_char>}* | <white_space>}"'

TODO identifier regular expression may be off
<identifier>        ::= <alpha_char> | {<alpha_char> | <number>}*

<white_space>       ::= ' '

<number>            ::= ['-']? <digit> {<digit>}*

<alpha_char>        ::= 'a'| ...'z'|'A'| ...'Z'

<digit>             ::= '0' | ...'9'



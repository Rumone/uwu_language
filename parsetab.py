
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftISNOTleftGTLTleftPLUSMINUSleftMULTDIVIDEMODAND ARROW BREAK CATCH COLON COMMA COMMENT CONTINUE DIVIDE ELSE ELSEIF EQUAL FALSE FLOAT FOR FUNC GT ID IF IN INT IS LBRACE LBRACKET LPAREN LT MINUS MOD MULT NOT OR PERIOD PLUS RBRACE RBRACKET RETURN RPAREN SEMI STRING STRINGLITERAL TRUE TRY VAR WHILE\n        statement   : expression\n                    | assignment\n        \n        assignment  : identifier EQUAL expression\n        \n        var_init  : decl EQUAL expression\n        \n        decl    : VAR identifier COLON decl_type\n                | VAR identifier   \n        \n        decl_type   : INT \n                    | FLOAT \n                    | STRING\n        \n        expression  : binary_expression\n        \n        binary_expression   : binary_expression PLUS binary_expression\n                            | binary_expression MINUS binary_expression \n                            | binary_expression MULT binary_expression \n                            | binary_expression DIVIDE binary_expression \n                            | binary_expression MOD binary_expression \n                            | binary_expression AND binary_expression \n                            | binary_expression OR binary_expression \n                            | binary_expression IS binary_expression \n                            | binary_expression NOT binary_expression \n                            | binary_expression GT binary_expression \n                            | binary_expression LT binary_expression\n                            | LPAREN binary_expression RPAREN \n                            | identifier \n        \n        identifier  : ID\n        '
    
_lr_action_items = {'LPAREN':([0,6,8,9,10,11,12,13,14,15,16,17,18,19,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'ID':([0,6,8,9,10,11,12,13,14,15,16,17,18,19,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'$end':([1,2,3,4,5,7,21,22,23,24,25,26,27,28,29,30,31,32,33,34,],[0,-1,-2,-10,-23,-24,-23,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-22,]),'PLUS':([4,5,7,20,21,22,23,24,25,26,27,28,29,30,31,32,34,],[8,-23,-24,8,-23,-11,-12,-13,-14,-15,8,8,8,8,8,8,-22,]),'MINUS':([4,5,7,20,21,22,23,24,25,26,27,28,29,30,31,32,34,],[9,-23,-24,9,-23,-11,-12,-13,-14,-15,9,9,9,9,9,9,-22,]),'MULT':([4,5,7,20,21,22,23,24,25,26,27,28,29,30,31,32,34,],[10,-23,-24,10,-23,10,10,-13,-14,-15,10,10,10,10,10,10,-22,]),'DIVIDE':([4,5,7,20,21,22,23,24,25,26,27,28,29,30,31,32,34,],[11,-23,-24,11,-23,11,11,-13,-14,-15,11,11,11,11,11,11,-22,]),'MOD':([4,5,7,20,21,22,23,24,25,26,27,28,29,30,31,32,34,],[12,-23,-24,12,-23,12,12,-13,-14,-15,12,12,12,12,12,12,-22,]),'AND':([4,5,7,20,21,22,23,24,25,26,27,28,29,30,31,32,34,],[13,-23,-24,13,-23,-11,-12,-13,-14,-15,-16,13,-18,-19,-20,-21,-22,]),'OR':([4,5,7,20,21,22,23,24,25,26,27,28,29,30,31,32,34,],[14,-23,-24,14,-23,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,]),'IS':([4,5,7,20,21,22,23,24,25,26,27,28,29,30,31,32,34,],[15,-23,-24,15,-23,-11,-12,-13,-14,-15,15,15,-18,-19,-20,-21,-22,]),'NOT':([4,5,7,20,21,22,23,24,25,26,27,28,29,30,31,32,34,],[16,-23,-24,16,-23,-11,-12,-13,-14,-15,16,16,-18,-19,-20,-21,-22,]),'GT':([4,5,7,20,21,22,23,24,25,26,27,28,29,30,31,32,34,],[17,-23,-24,17,-23,-11,-12,-13,-14,-15,17,17,17,17,-20,-21,-22,]),'LT':([4,5,7,20,21,22,23,24,25,26,27,28,29,30,31,32,34,],[18,-23,-24,18,-23,-11,-12,-13,-14,-15,18,18,18,18,-20,-21,-22,]),'EQUAL':([5,7,],[19,-24,]),'RPAREN':([7,20,21,22,23,24,25,26,27,28,29,30,31,32,34,],[-24,34,-23,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,19,],[2,33,]),'assignment':([0,],[3,]),'binary_expression':([0,6,8,9,10,11,12,13,14,15,16,17,18,19,],[4,20,22,23,24,25,26,27,28,29,30,31,32,4,]),'identifier':([0,6,8,9,10,11,12,13,14,15,16,17,18,19,],[5,21,21,21,21,21,21,21,21,21,21,21,21,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement','uwu_parser.py',42),
  ('statement -> assignment','statement',1,'p_statement','uwu_parser.py',43),
  ('assignment -> identifier EQUAL expression','assignment',3,'p_assignment','uwu_parser.py',50),
  ('var_init -> decl EQUAL expression','var_init',3,'p_var_init','uwu_parser.py',56),
  ('decl -> VAR identifier COLON decl_type','decl',4,'p_decl','uwu_parser.py',63),
  ('decl -> VAR identifier','decl',2,'p_decl','uwu_parser.py',64),
  ('decl_type -> INT','decl_type',1,'p_decl_type','uwu_parser.py',74),
  ('decl_type -> FLOAT','decl_type',1,'p_decl_type','uwu_parser.py',75),
  ('decl_type -> STRING','decl_type',1,'p_decl_type','uwu_parser.py',76),
  ('expression -> binary_expression','expression',1,'p_expression','uwu_parser.py',83),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','uwu_parser.py',91),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','uwu_parser.py',92),
  ('binary_expression -> binary_expression MULT binary_expression','binary_expression',3,'p_binary_expression','uwu_parser.py',93),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','uwu_parser.py',94),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','uwu_parser.py',95),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','uwu_parser.py',96),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','uwu_parser.py',97),
  ('binary_expression -> binary_expression IS binary_expression','binary_expression',3,'p_binary_expression','uwu_parser.py',98),
  ('binary_expression -> binary_expression NOT binary_expression','binary_expression',3,'p_binary_expression','uwu_parser.py',99),
  ('binary_expression -> binary_expression GT binary_expression','binary_expression',3,'p_binary_expression','uwu_parser.py',100),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','uwu_parser.py',101),
  ('binary_expression -> LPAREN binary_expression RPAREN','binary_expression',3,'p_binary_expression','uwu_parser.py',102),
  ('binary_expression -> identifier','binary_expression',1,'p_binary_expression','uwu_parser.py',103),
  ('identifier -> ID','identifier',1,'p_identifier','uwu_parser.py',112),
]

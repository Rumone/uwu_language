
<statement> ::= <expression>

<data_type>   ::= INT | FLOAT | STRING

<assignment>    ::= <identifier> EQUAL (<expression> | <string_literal>)

<var_assign>    ::= <declaration> EQUAL (<expression> | <string_literal>)

<declaration>   ::= VAR <identifier>
                | VAR <identifier> COLON <data_type>

// TODO add more types of expression
<expression>    ::= <binary_expression>
                | <conditional_expression> 

<binary_expression> ::= <binary_expression> PLUS <binary_expression>
                    | <binary_expression> MINUS <binary_expression>
                    | <binary_expression> ADD <binary_expression>
                    | <binary_expression> DIVIDE <binary_expression>
                    | <binary_expression> MOD <binary_expression>
                    | <binary_expression> AND <binary_expression>
                    | <binary_expression> OR <binary_expression>
                    | <binary_expression> IS <binary_expression>
                    | <binary_expression> NOT <binary_expression>
                    | <binary_expression> GT <binary_expression>
                    | <binary_expression> LT <binary_expression>
                    | LPAREN <binary_expression> RPAREN
                    | <number>
                    | <identifier>


<if_control_structure>  ::= IF <conditional_expression> <body_definition>
                        | IF <conditional_expression> <body_definition> ELSEIF <conditional_expression> <body_definition>
                        | IF <conditional_expression> <body_definition> ELSE <body_definition>

<conditional_expression>    ::= LPAREN <binary_expression> RPAREN 

<body_definition>   ::= <assignment>
                    | <expression>
                    | <if_control_structure>
                    | LBRACE <body_definition> RBRACE

<string_literal>    ::= '"{<alphabetic_characteristics>}* | <white_space>"'

<identifier>    ::= <alphabetic_characteristics> | {<alphabetic_characteristics> | <number>}*

<white_space>   ::= ' '

<number>    ::= ['-']? <digit> {<digit>}*

<alphabetic_characters> ::= 'a'| ...'z'|'A'| ...'Z'

<digit> ::= '0' | ...'9'


